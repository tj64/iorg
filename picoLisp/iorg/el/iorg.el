;; * iorg.el --- interactive Org-mode
;; ** MetaData
;;   :PROPERTIES:
;;   :copyright: Thorsten_Jolitz
;;   :copyright-since: 2013
;;   :version:  0.9
;;   :licence:  GPL3+
;;   :licence-url: http://www.gnu.org/licenses/
;;   :part-of-emacs: no
;;   :git-repo: https://github.com/tj64/iorg
;;   :git-clone: git@github.com:tj64/iorg.git
;;   :authors: Thorsten_Jolitz
;;   :contact: <tjolitz@gmail.com>
;;   :inspiration:  org-mode picolisp
;;   :keywords: emacs org-mode dhtml interactive_web_applications
;;   :END:

;; ** Commentary
;; *** About iOrg
;; *** Installation
;; *** Bugs and Shortcomings
;; *** Emacs Version
;; ** ChangeLog

;; * Requires

;; ;; get it from ELPA
;; ;; or from the [[https://github.com/nicferrier/emacs-kv][github-repo]]
;; (require 'kv)
;; (require 'paredit)
;; (require 'inferior-picolisp nil 'NOERROR)
;; (require 'outorg nil 'NOERROR)
(require 'ox)

(eval-when-compile (require 'cl))

;; * Mode and Exporter definitions

;; ** Mode definitions

;; *** iOrg Minor Mode

;; FIXME  \\[iorg-link] iorg-link ??
(define-minor-mode iorg-minor-mode
   "Minor mode for Org-mode buffers generated by outorg.
There is a mode hook, and a few commands:
\\[iorg-insert-internal-link] iorg-insert-internal-link
\\[iorg-minor-mode-map] iorg-minor-mode-map"
  :lighter " iOrg"
  :keymap '(("\C-c\C-x=" . iorg-insert-internal-link)))

(add-hook 'org-mode-hook 'iorg-minor-mode)

;; * Variables
;; ** Consts
;; ** Vars

(defvar iorg-directory
   (file-name-directory
    (directory-file-name (file-name-directory (buffer-file-name))))
  "iOrg directory.")

(defvar iorg-default-host-path "http://localhost:5001"
  "Default path (protocol, host, port) for iOrg server.")

;; ** Hooks
;; ** Customs
;; *** Custom Groups
;; *** Custom Vars
;; * Functions
;; ** Non-interactive Functions
;; *** Helper Functions

;; *** Core Functions

;; **** Edit Database Objects

;; ** Commands

(defun iorg-set-default-host-path (path)
  "Change `iorg-default-host-path' temporarily.

The new PATH will remain valid until set again or until `iorg.el'
is loaded again. In the latter case it will be reset to
\"http://localhost:5000\"."
 (interactive "sURL (e.g. http://localhost:5000): ")
 (setq iorg-default-host-path path))


;; TODO:
;; 1. prompt user for target (no prefix) or target and label (with prefix)
;; 2. prompt user for url (with other prefix)
;; 3. add var iorg-default-path and fun iorg-set-default-path (for url)
;; 4. offer completion for target by extracting all unique docs from url
(defun iorg-insert-internal-link (name &optional lbl)
  "Insert internal-link in PicoLisp-Wiki syntax.

Such a link can take two forms:

 1. ={target}
 2. ={target label}

where 'target' is the NAME of the wiki document linked to and
'label' (optional argument LBL) is the text that will be shown as
clickable link when the document is rendered in the wiki."
  (interactive
   (let ((query "iorg/queries/allDocNames.l"))
     (cond
      ((equal current-prefix-arg nil)
       (list
        (ido-completing-read
         "Target: " (iorg-retrieve-url query 'LISP-P))))
      (t
       (list
        (ido-completing-read
         "Target: " (iorg-retrieve-url query 'LISP-P))
        (read-string "Label: "))))))
  (insert (format "={%s%s}"
                  name
                  (if lbl (concat " " lbl) ""))))

;; (defun iorg-get-wiki-files ()
;;   "Return a list with names of all current iOrg wiki files."
;;   (mapcar
;;    #'(lambda (nm) (if (stringp nm) nm (symbol-name nm)))
;;   (iorg-retrieve-url


;; * Menus and Keys
;; ** Menus
;; ** Keys
;; *** Mode Keys


;; * Obsolete Stuff


;; * Run hooks and provide

(provide 'iorg)

;; iorg.el ends here
