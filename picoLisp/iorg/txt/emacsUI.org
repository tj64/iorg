#+OPTIONS: toc:nil num:nil
#+DESCRIPTION: Emacs UI
#+TITLE: Emacs as Expert User Interface for iOrg

{={webUI Back}}

/{{{title}}}/

* Emacs UI

Providing a Web UI for editing Org-mode documents and Org elements that are
stored as entities in the database is a very important feature of iOrg - it
allows Org-mode to break out of the 'Emacs Ghetto' and conquer the world (at
least it allows Emacs users to cooperate with the millions of mere mortals
that use computers too).

On the other hand, Emacs user don't like to do serious editing in HTML text
areas in the web-browsers, they want to edit in Emacs. Offering an Emacs UI to the
experts is a core feature of iOrg, and distinguishes it from other tools
that are designed for the average user but stay way behind the expectations of
expert users.

There are several ways to access iOrg applications via Emacs, as described in
the following sections.

** Editing with Emacs from Webbrowsers

With many webbrowsers it is possible to call an external editor for editing
textareas, and in the case of Emacs this should generally be [[http://www.emacswiki.org/emacs/EmacsClient#toc17][Emacsclient]] due
to its quick start-up. How this is configurated varies from browser to
browser, but here are a few links:

 - Conkeror :: [[http://conkeror.org/ExternalEditing][External Editing]]
 - Chrome :: [[https://github.com/stsquad/emacs_chrome/network][Emacs\_Chrome]]
 - FireFox :: [[https://addons.mozilla.org/en-US/firefox/addon/its-all-text/?src%3Dsearch][Its all Text]]

and here another link to a general discussion on [[http://superuser.com/questions/488348/edit-any-text-input-shown-by-a-browser-mostly-chrome-with-emacs][Stackoverflow]].

** Emacs W3M

Browsing iOrg webapplications with a standard webbrowser and occasionally call
Emacsclient for some significant external editing (of e.g. a Wiki document) is
already quite comfortable. However, since another core feature of iOrg
(inherited from the PicoLisp framework) is full functionality without
Javascript, Cookies and other fancy stuff, there does already exist an almost
perferct Emacs UI to iOrg: *emacs-w3m*.

W3M is probably the most popular text-browser around, and emacs-w3m is an
extended major-mode that fully integrates it into Emacs. Especially with

: ,------------------------------------------------------------------------------
: | W3m-Lnum minor mode (indicator[ln]):
: | Minor mode to extend point commands by using Conkeror style number selection.
: `------------------------------------------------------------------------------

enabled, browsing iOrg apps is fast and convenient, and everything happens in
plain-text Emacs buffers with the full Emacs editing power at your fingertips.

All interactive functionality is available too - in theory at last. There was
a rather annoying bug in /w3m-form.el/ that made it impossible to use
emacs-w3m to fill out iOrg html-forms. It was fixed only recently after a
bug-report from me, so you _need_ a new version of emacs-w3m to edit html forms
(see ={assumpt Assumptions} too).  There are a few other things that don't yet
work as expected, like e.g.:

 - in iOrg, forms are disabled until the =edit= button is pressed, because a
   database-lock on the object is needed before modifying it. In a standard
   webbrowser, you simply cannot edit anything before you press the button.
   emacs-w3m lets you fill out the whole form anyway, only to witness how all
   your data is lost when you try to submit.
 - in emacs-w3m, you can successfully edit (one-line) text-fields in the
   mini-buffer and submit the data. Unfortunately, this does not work with
   textareas yet even when the =edit= button was pressed. The data is lost and
   never stored in the database.
 - when editing a textarea, a decicated text-mode buffer with adjusted size is
   openend for editing in `w3m-form-input-textarea-mode' and send back and
   saved on quitting editing. This is quick and convenient for small chunks of
   text, but not what you want for a web application based on Org-mode markup
   syntax. It would be much better to edit the text in an Org-mode buffer that
   is not sized down to minimal dimensions. This is already possible, as
   demonstrated next, but not yet in a straight-forward way.

These are a few inconveniences at the moment, but they won't be too difficult
to fix and don't change the fact that emacs-w3m is very well suited as
interface to iOrg apps. Fixing them might still take a bit longer since code I
don't own is involved.

Now lets explore whats already possible right now:

 1. start-up (or reuse) the iOrg http-server in production mode as described
    in ={webUI Web UI}
 2. call =M-x w3m= and then type  =G= and =http://localhost:5001 (remember to
    patch or update /w3m-form.el/ as described in ={assumpt Assumptions}
 3. login with member/member
 4. click/select Documents in the menu
 5. edit the =name= field (click the =edit= button first!) and notice how
    edits are stored and preserved when the =done= button is clicked.
 6. click the =edit= button again and edit the text area with the document
    content. Note that a (rather small) dedicated buffer in text-mode is
    opened, that is ok for editing, but not the best option. It is already
    possible to edit the content in a normal sized Org-mode buffer, but a few
    intermediary steps are necessary for this:

    - type =C-u M-x outorg-edit-as-org RET=
    - when prompted for comment syntax, enter a =# RET= => you should see an
      *outorg-edit-buffer* in Org-mode now with the textarea's content
    - edit the content as you like and type =M-x outorg-copy-edits-and-exit=.
      when prompted for comment-syntax, enter =# RET= again, and you should
      see the edited text in the small original text-mode buffer now.
    - from here, you can send the text to the form with =C-c C-c=, and then
      press the =done= button again. There is no error message, but there must
      be a bug, since the edits are not stored in the process but rather lost.

    When the bug is fixed and the textarea is presented immediately in an
    Org-mode buffer for editing, it will be very convenient and efficient to
    edit iOrg content via emacs-w3m.

** iOrg (Quick) Scrape Mode

Besides emacs-w3m, the PicoLisp REPL (based on inferior-picolisp.el) is
another powerful way to access iOrg web apps from within Emacs. This is made
possible by the =scrape.l= library included in the PicoLisp distribution and
described in this [[http://picolisp.com/5000/!wiki?guiScripting][wiki article]].

While it is relatively easy to GET data from a running iOrg web application
(with function =iorg-retrieve-url=, used e.g. to retrieve a completion list
for the iorg-minor-mode command =iorg-insert-internal-link= as described in
the next section), its much more complicated to PUT data. =scrape.l= allows to
browse an iOrg application on the command-line, get a list of all links,
fields and buttons, =press= and =click= on them or =enter= and =display= data,
all with taking care of session-handling, login-permission etc. *Scraping* is
like web-browsing, on in the REPL on the command-line.

Why is this useful? Well, it makes it very easy to design and write tests that
involve the webUI, and it provides the necessary core functionality for
application code that does reading & writing in session contexts.

I did not take the challenge to port =scrape.l= to Emacs Lisp, but I wrote
=iorg-scrape.el= that makes much of the scraping functionality directly
available as Emacs Lisp functions, and offers two modes with easy keybindings
for convenient scraping in an inferior PicoLisp buffer in Emacs:

 - iorg-scrape-mode :: scraping in read&write mode
 - org-quick-scrape-mode :: quick scraping with single key commands in
      read-only mode

=iorg-scrape.el= depends on the existing =picolisp-mode= for Emacs that is
maintained and co-authored by me and had to be modified in several places to
fit in with iorg-scrape.

Lets try it out:

 1. load =iorg-scrape.el= in Emacs if not already done
 2. make sure the =inferior-picolisp.el= from /picoLisp/iorg/el/ is loaded
 3. call =M-x iorg-scrape-repl= -> an *iorg-scrape* buffer should open with a
    prompt
 4. try =(+ 3 3)= to check its working
 5. check =C-h v iorg-scrape-default-server-dir= and set it if necessary with
    =iorg-scrape-set-default-server-dir= to the right value for your system
 6. in the *iorg-scrape* buffer, load =iorg/lib.l=, e.g. with =(load
    "/home/tj/git/iorg/picoLisp/iorg/lib.l")= (adjust to your settings)
 7. enter =(scrape "localhost" 5001)= (adjust to your settings)
 8. type =C-c C-c d= and you should see something like

    #+begin_src sh
      (scrape "localhost" 5001)
      -> "iOrg"
      : ###############
      click: 1 "iOrg" 2 "Home"

      press: 1 "login"

      enter/value: 1 "TimeOut 19:26 UTC" 2 ("*Gui:1:") 3 ("*Gui:2:")

      -> "iOrg"
      :
    #+end_src

 9. now type =C-h m= to see the different Emacs Lisp scrape commands and their
    keybindings available
10. type =M-x iorg-quick-scrape-mode=, and then:

    =c 1 RET= then  =m 3 RET admin RET= then =m 4 RET admin RET=
    then =p 2 RET= and you should be logged in.

    with =q= you can go back to read&write mode.

11. Alternatively, you can fire up an http-scrape-server with =M-x
    iorg-scrape-start-server=. Note that this is a subprocess of Emacs, a
    slave to do the scraping work for the Emacs master, and that this is a
    separate process from the standalone iOrg http-server that runs the iOrg
    web app that will be scraped (by default on http://localhost:5001). You
    can then call this http server from you Emacs Lisp program.

** iOrg Minor Mode

There is only a limited need for an =iorg-minor-mode=, since interaction with
a session-based web-application is not necessarily something implemented on the
fly in a minor-mode, but rather a task for a specialised and extended
major-mode like emacs-w3m or for a PicoLisp REPL started as Emacs subprocess,
like described above.

However, there are at least two tasks an iorg-minor-mode could take care of
when activated for an Org-mode buffer:

 - Insert iorg-wiki-local links

   Due to the dynamic way URLs are created in the PicoLisp framework, these
   internal links depend on a port-number and session-id that can't be known
   in advance, thus there is no way to insert these links like normal static
   weblinks in Org-mode - in must be done in very last momemt before rendering
   the HTML page containing the local link.

   Therefore one new syntax element was introduced into Org-mode (identical to the
   original syntax for local links in the PicoLisp wiki markup):

   #+begin_src org
   # iOrg wiki-local link
     # ={name Label} # outcommented to avoid interpretation
   #+end_src

   These links are just text for Org-mode, and should not be shown as links in
   Org-mode files, since they are just that - plain text without any
   associated functionality.

   However, it would be convenient to have an iorg-minor-mode command with
   keybinding available thats prompts the user with completion for the
   document-name, letting him choose between all documents currently stored in
   the iOrg database. Thus a command that queries the iOrg database for all
   document names, reads the result list as Emacs Lisp object, and uses it for
   the completing-read function. This is implemented with

   #+begin_src sh
     iorg-insert-internal-link is an interactive Lisp function in `iorg.el'.

     It is bound to C-c C-x =.

     (iorg-insert-internal-link NAME &optional LBL)

     Insert internal-link in PicoLisp-Wiki syntax.

     Such a link can take two forms:

      1. # ={target}
      2. # ={target label}

     where 'target' is the NAME of the wiki document linked to and
     'label' (optional argument LBL) is the text that will be shown as
     clickable link when the document is rendered in the wiki.
   #+end_src

   With prefix arg, it prompts for target and label, otherwise for label only.
   =iorg-minor-mode= should be 'hooked' to the =org-mode-hook= to have this
   available in Org-mode.

 - add a new Org file to the iOrg wiki

   After giving it a second thought, I decided not to implement this right
   now since this is easier done with the visual support of a (text) brower.
   However, it would be nice to be able to send and Org file directly from the
   Org-mode buffer to the iOrg wiki as =new= or =edited= wiki document. On the
   todo list ...

** TODO iOrg Agenda Mode :NOT_IMPLEMENTED:

Once the basics are there, re-implementing the Org-mode agenda based on
PicoLisp database queries should be quite easy, and this re-implementation
would not suffer anymore from the performance and scalability limitations of
the Org-mode agenda.

** TODO iOrg Dired Mode :NOT_IMPLEMENTED:

A dired-like mode for the documents stored in the iOrg wiki would be a
nice-to-have feature and not to difficult to implement. iorg-dired buffers
would be for content-management in iOrg what dired buffers are for managing
the file system in Emacs.

For now, the =Documents= link in the iOrg wiki menu shows view on all wiki
docs that is quite similar to a dired (or ls -al) view, and provided viewing
and editing functionality for the selected documents. When viewed in
emacs-w3m, it has almost a dired-like look&feel, so that iorg-dired will be an
optional feature on the todo list.
